from collections import Callable
from enum import IntEnum, auto
from typing import Union, NoReturn, Any, Tuple

from PyQt5.QtCore import QPoint, Qt, QMimeData
from PyQt5.QtGui import QDragEnterEvent, QDropEvent, QDragLeaveEvent, QPaintEvent, QPainter, QFont, \
    QFontMetrics, QPen, QColor, QBrush, QMouseEvent
from PyQt5.QtWidgets import QWidget, QPushButton, QGridLayout, QFrame, QFileDialog

from storage import FileDialogInput, DragAndDropInput, InputEntity


class InputArea(QFrame):
    __request_uploading: Callable[[Union[FileDialogInput, DragAndDropInput, InputEntity]], NoReturn] = ...
    __layout: QGridLayout = ...
    __drop_area: DropImage = ...
    __dialog_button: QPushButton = ...

    def __init__(self, parent: QWidget, request_uploading: Callable[
        [Union[FileDialogInput, DragAndDropInput, InputEntity]], NoReturn]) -> NoReturn: ...

    def file_dialog(self) -> NoReturn: ...


class DropImage(QWidget):
    class States(IntEnum):
        normal: Any = ...
        expected_type: Any = ...
        wrong_type: Any = ...

    __state: States = ...
    __request_uploading: Callable[[Union[FileDialogInput, DragAndDropInput, InputEntity]], NoReturn] = ...

    possible_mime_types: Tuple[str, ...] = ...

    def __init__(self, parent: QWidget,
                 request_uploading: Callable[
                     [Union[FileDialogInput, DragAndDropInput, InputEntity]], NoReturn]) -> NoReturn: ...

    def dragEnterEvent(self, event: QDragEnterEvent) -> NoReturn: ...

    def dragLeaveEvent(self, event: QDragLeaveEvent) -> NoReturn: ...

    def dropEvent(self, event: QDropEvent) -> NoReturn: ...

    def paintEvent(self, event: QPaintEvent) -> NoReturn: ...

    def mouseReleaseEvent(self, event: QMouseEvent) -> NoReturn: ...
