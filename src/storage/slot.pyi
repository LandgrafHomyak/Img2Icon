from functools import lru_cache
from typing import List, Union, NoReturn, Optional

from PyQt5.QtCore import QObject, pyqtSignal, QSize, QRect, QRectF
from PyQt5.QtGui import QPixmap, QPainter, QImage
from PyQt5.QtXml import QDomDocument

from gui.fileslist import Row
from storage.loader import LoadRequest, FileOnURL, FileOnPath


class Slot(QObject):
    prepared: Optional[Union[PreparedImage, PreparedBitmap, PreparedSVG]] = ...
    original: Optional[Union[QImage, QDomDocument]] = ...
    location: Union[LoadRequest, FileOnPath, FileOnURL] = ...
    row: Row = ...
    in_order_signal: pyqtSignal = ...
    processing_signal: pyqtSignal = ...
    complete_signal: pyqtSignal = ...
    error_signal: pyqtSignal = ...
    update_preview_signal: pyqtSignal = ...

    def __init__(self, location: Union[LoadRequest, FileOnPath, FileOnURL], row: Row) -> NoReturn: ...

    def in_order(self) -> NoReturn: ...

    def processing(self) -> NoReturn: ...

    def complete(self) -> NoReturn: ...

    def error(self) -> NoReturn: ...

    def update(self) -> NoReturn: ...


class PreparedImage:
    def to_bitmap(self, size: QSize) -> QPixmap: ...

    def free_resize(self) -> bool: ...

    def available_sizes(self) -> List[QSize]: ...

    def render(self, painter: QPainter, rect: Union[QRect, QRectF]) -> NoReturn: ...

    def size(self) -> QSize: ...

    def prerendered(self) -> QImage: ...


class PreparedBitmap(PreparedImage):
    img: QImage = ...

    def __init__(self, qimage: QImage) -> NoReturn: ...

    def to_bitmap(self, size: QSize) -> QPixmap: ...

    def free_resize(self) -> bool: ...

    def available_sizes(self) -> List[QSize]: ...

    def render(self, painter: QPainter, rect: Union[QRect, QRectF]) -> NoReturn: ...

    def size(self) -> QSize: ...

    def prerendered(self) -> QImage: ...


class PreparedSVG(PreparedImage):
    dom: QDomDocument = ...
    __prerendered: QImage = ...

    def __init__(self, qdom: QDomDocument) -> NoReturn: ...

    def to_bitmap(self, size: QSize) -> QPixmap: ...

    def free_resize(self) -> bool: ...

    def available_sizes(self) -> List[QSize]: ...

    def render(self, painter: QPainter, rect: Union[QRect, QRectF]) -> NoReturn: ...

    def size(self) -> QSize: ...

    def prerendered(self) -> QImage: ...
