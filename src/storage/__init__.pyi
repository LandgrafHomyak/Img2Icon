from typing import Union, Callable, NoReturn, Tuple, List, Any

from PyQt5.QtCore import QObject, QMimeData, QSize, QRect, QRectF
from PyQt5.QtGui import QPixmap, QPainter, QImage

from gui.file_managment.files_list import FilesList


class Storage(QObject):
    def __init__(self, files_list_widget: FilesList, set_empty_callback: Callable[[], NoReturn],
                 set_workspace_callback: Callable[[], NoReturn]) -> NoReturn: ...

    def add(self, input: Union[InputEntity, FileDialogInput, DragAndDropInput]) -> NoReturn: ...

    def get(self, index: int) -> Slot: ...


class InputEntity:
    pass


class FileDialogInput(InputEntity):
    def __init__(self, entity: Tuple[List[str], List[str]]) -> NoReturn: ...


class DragAndDropInput(InputEntity):
    def __init__(self, entity: QMimeData) -> NoReturn: ...


class Slot(QObject):
    prepared: Union[PreparedImage, PreparedSVG, PreparedBitmap] = ...


class PreparedImage:
    def to_bitmap(self, size: QSize) -> QPixmap: ...

    def free_resize(self) -> bool: ...

    def available_sizes(self) -> List[QSize]: ...

    def render(self, painter: QPainter, rect: Union[QRect, QRectF]) -> NoReturn: ...

    def size(self) -> QSize: ...

    def prerendered(self) -> QImage: ...


class PreparedBitmap(PreparedImage):

    def to_bitmap(self, size: QSize) -> QPixmap: ...

    def free_resize(self) -> bool: ...

    def available_sizes(self) -> List[QSize]: ...

    def render(self, painter: QPainter, rect: Union[QRect, QRectF]) -> NoReturn: ...

    def size(self) -> QSize: ...

    def prerendered(self) -> QImage: ...


class PreparedSVG(PreparedImage):
    def to_bitmap(self, size: QSize) -> QPixmap: ...

    def free_resize(self) -> bool: ...

    def available_sizes(self) -> List[QSize]: ...

    def render(self, painter: QPainter, rect: Union[QRect, QRectF]) -> NoReturn: ...

    def size(self) -> QSize: ...

    def prerendered(self) -> QImage: ...
