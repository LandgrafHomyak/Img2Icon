from collections import deque
from typing import List, Tuple, Any, Iterator, NoReturn, Union, Callable

from PyQt5.QtCore import QThread, pyqtSignal, QMimeData, QUrl

from gui.fileslist import FilesList
from storage.slot import Slot


class TableController(QThread):
    __add_rows_signal: pyqtSignal = ...
    __queue: deque[Union[InputEntity, FileDialogInput, DragAndDropInput]] = ...
    __widget: FilesList = ...
    __load_slot: Callable[[Slot], NoReturn] = ...
    __store_slot: Callable[[Slot], NoReturn] = ...
    __thread_blocked: bool = ...

    def __init__(self, widget: FilesList, load_slot: Callable[[Slot], NoReturn],
                 store_slot: Callable[[Slot], NoReturn]) -> NoReturn: ...

    def add(self, input: Union[InputEntity, FileDialogInput, DragAndDropInput]): ...

    def run(self) -> NoReturn: ...

    def __add_rows(self, count: int) -> NoReturn: ...

    def __unblock_thread(self) -> NoReturn: ...

    def __error_slot(self) -> NoReturn: ...


class InputEntity:
    pass


class FileDialogInput(InputEntity):
    __entity: Tuple[List[str], List[str]] = ...

    def __init__(self, entity: Tuple[List[str], List[str]]) -> NoReturn: ...

    def __len__(self) -> int: ...

    def __getitem__(self, i: int) -> str: ...

    def __iter__(self) -> Iterator[str]: ...


class DragAndDropInput(InputEntity):
    __entity: QMimeData = ...

    def __init__(self, entity: QMimeData) -> NoReturn: ...

    def is_image(self) -> bool: ...

    def is_url(self) -> bool: ...

    def __getitem__(self, i) -> QUrl: ...

    def __iter__(self) -> Iterator[QUrl]: ...

    def __len__(self) -> int: ...
