from enum import IntEnum
from typing import List, NoReturn, Any, Union, Optional, Callable

from PyQt5.QtCore import QSize
from PyQt5.QtGui import QImage, QPaintEvent
from PyQt5.QtWidgets import QTableWidget, QLabel, QWidget, QPushButton

from _old.storage import PreparedImage, PreparedBitmap, PreparedSVG


class FilesList(QTableWidget):
    __rows: List[Row] = ...

    def __init__(self, parent: QWidget, set_selected_slot_number: Callable[[int], NoReturn]) -> NoReturn: ...

    def delete_row(self, row_object: Row) -> NoReturn: ...

    def add_rows(self, count: int, callback: Callable[[], NoReturn] = ...) -> NoReturn: ...

    def get_row(self, y: int) -> Row: ...

    def init_row(self, y: int) -> NoReturn: ...

    def row_clicked(self, event: Any) -> NoReturn: ...  #TODO ClickEvent

    def __len__(self) -> int: ...


class Row:
    preview: Optional[ImagePreview] = ...
    state: Optional[UploadingState] = ...
    format: Optional[QLabel] = ...
    delete_btn: Optional[DeleteButton] = ...


class ImagePreview(QWidget):
    image_to_render: Optional[Union[PreparedSVG, PreparedBitmap, PreparedImage]] = ...
    prerendered_image: QImage = ...
    prerendered_size: QSize = ...

    def __init__(self, parent: QWidget) -> NoReturn: ...

    def paintEvent(self, event: QPaintEvent) -> NoReturn: ...

    def set_prepared_image(self, prepared_image: Union[PreparedSVG, PreparedBitmap, PreparedImage]) -> NoReturn: ...


class DeleteButton(QPushButton):
    def __init__(self, parent: QWidget) -> NoReturn: ...


class UploadingState(QWidget):
    class States(IntEnum):
        not_stated: Any = ...
        in_order: Any = ...
        processing: Any = ...
        complete: Any = ...
        error: Any = ...

    __state: States = ...

    def __init__(self, parent: QWidget) -> NoReturn: ...

    def in_order(self) -> NoReturn: ...

    def processing(self) -> NoReturn: ...

    def complete(self) -> NoReturn: ...

    def error(self) -> NoReturn: ...

    def paintEvent(self, event: QPaintEvent) -> NoReturn: ...


class HasFilesListWidget:
    def files_list_widget(self) -> FilesList: ...
