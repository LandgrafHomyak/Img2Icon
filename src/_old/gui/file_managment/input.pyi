from enum import IntEnum
from typing import Any, Callable, Union, Tuple, NoReturn

from PyQt5.QtCore import QMimeData
from PyQt5.QtGui import QDragEnterEvent, QDropEvent, QDragLeaveEvent, QPaintEvent, QMouseEvent
from PyQt5.QtWidgets import QWidget, QFrame

from _old.storage import FileDialogInput, DragAndDropInput, InputEntity


class InputAreaBase(QFrame):
    __slots__ = ("__request_uploading", "__layout", "__drop_area", "__dialog_button")

    def __init__(self, parent, request_uploading): ...

    def file_dialog(self, input): ...


class DropImage(QWidget):
    class States(IntEnum):
        normal: Any = ...
        expected_type: Any = ...
        wrong_drop_type: Any = ...
        single_link_required: Any = ...

    __state: States = ...
    __request_uploading: Callable[[Union[FileDialogInput, DragAndDropInput, InputEntity]], NoReturn] = ...

    possible_mime_types: Tuple[str, ...] = ...

    def __init__(self, parent: QWidget,
                 request_uploading: Callable[[Union[FileDialogInput, DragAndDropInput]], NoReturn],
                 check: Callable[[QMimeData], States]) -> NoReturn: ...

    def dragEnterEvent(self, event: QDragEnterEvent) -> NoReturn: ...

    def dragLeaveEvent(self, event: QDragLeaveEvent) -> NoReturn: ...

    def dropEvent(self, event: QDropEvent) -> NoReturn: ...

    def paintEvent(self, event: QPaintEvent) -> NoReturn: ...

    def mouseReleaseEvent(self, event: QMouseEvent) -> NoReturn: ...


class InputArea:
    class Single(InputAreaBase):
        def file_dialog(self): ...

        def __drop_check(self, data: QMimeData) -> DropImage.States: ...

    class Multi(InputAreaBase):
        def file_dialog(self): ...

        def __drop_check(self, data: QMimeData) -> DropImage.States: ...
